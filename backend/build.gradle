import org.apache.tools.ant.filters.ReplaceTokens

buildscript{
    ext {
        springBootVer = '2.4.5'
        querydslVer = '4.4.0'
        querydslPluginVer = '1.0.10'
        springDependencyMgmtVer = '1.0.11'
        springLoadedVer = '1.2.8'
        nodePluginVer = '1.3.1'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVer}"
        classpath "io.spring.gradle:dependency-management-plugin:${springDependencyMgmtVer}.RELEASE"
        classpath "org.springframework:springloaded:${springLoadedVer}.RELEASE"
        //이클립스인 경우를 위한 QueryDSL 플러그인. IntelliJ는 불필요. [시작]
//        classpath "gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVer}"
        //[끝] 
        classpath "com.github.node-gradle:gradle-node-plugin:3.1.0"
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version "${springBootVer}"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'eclipse'
apply plugin: 'com.github.node-gradle.node'
//이클립스인 경우를 위한 QueryDSL 플러그인. IntelliJ는 불필요.
//apply plugin: 'com.ewerk.gradle.plugins.querydsl'


repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/snapshot' }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url "https://repo.spring.io/libs-release" }
    maven { url "https://repo.maven.apache.org/maven2" }
    maven { url "https://build.shibboleth.net/nexus/content/repositories/releases" }
}

group 'com.ssafy'
version '1.0-SNAPSHOT'
sourceCompatibility = '1.8'

node {
    download = true
    version = '14.17.0'
    // Set the work directory where node_modules should be located
    nodeModulesDir = file("${project.projectDir}/../frontend")
}

configurations {
    providedRuntime
}

/*task npmInstall(type: NpmTask, overwrite: true) {
    args = ['install']
}*/

/*task webpack(type: NpmTask, dependsOn: 'npmInstall') {
    args = ['run','build']
}*/

// processResources is a Java task. Run the webpack bundling before this task using the 'build' task in the package.json
//processResources.dependsOn 'webpack'

//set build time and inject value to application.properties
def buildTime() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd_HHmm')
    return formattedDate
}

project.ext.set("build.date", buildTime())

processResources {
    with copySpec {
        from "src/main/resources"
        include "**/application*.yml"
        include "**/application*.yaml"
        include "**/application*.properties"
        project.properties.findAll().each {
            prop ->
                if (prop.value != null) {
                    filter(ReplaceTokens, tokens: [ (prop.key): String.valueOf(prop.value)])
                    filter(ReplaceTokens, tokens: [ ('project.' + prop.key): String.valueOf(prop.value)])
                    filter(ReplaceTokens, tokens: [ ('project.ext.' + prop.key): String.valueOf(prop.value)])
                }
        }
    }
}

//이클립스인 경우를 위한 QueryDSL 설정. IntelliJ는 불필요. [시작]
//def querydslDir = 'src/main/generated'
//querydsl {
//    library = "com.querydsl:querydsl-apt"
//    jpa = true
//    querydslSourcesDir = querydslDir
//}
//
//sourceSets {
//    main {
//        java {
//            srcDirs = ['src/main/java', querydslDir]
//        }
//    }
//}
//
//compileQuerydsl {
//    options.annotationProcessorPath = configurations.querydsl
//}
//
//configurations {
//    querydsl.extendsFrom compileClasspath
//}
//[끝]

dependencies {
    //spring
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-websocket")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-client") //소셜 로그인위해 추가
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.plugin:spring-plugin-core:2.0.0.RELEASE")
    testImplementation("org.springframework.security:spring-security-test")
    annotationProcessor("org.springframework.boot:spring-boot-starter-data-jpa")
    developmentOnly("org.springframework.boot:spring-boot-devtools")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    //jwt
    implementation("io.jsonwebtoken:jjwt-api:0.11.2")
    runtimeOnly("io.jsonwebtoken:jjwt-impl:0.11.2")
    runtimeOnly("io.jsonwebtoken:jjwt-jackson:0.11.2")
    //db
    runtimeOnly("mysql:mysql-connector-java")
    implementation("com.querydsl:querydsl-jpa:${querydslVer}")
    implementation("com.querydsl:querydsl-apt:${querydslVer}")

    implementation('commons-io:commons-io:2.6')
    implementation("org.apache.commons:commons-collections4:4.4")
    implementation("org.apache.commons:commons-lang3:3.9")

    //STOMP 웹소캣 서버 사이드 테스트를 위한 의존성 추가
    implementation("org.springframework.boot:spring-boot-starter-mustache")
    //STOMP 관련 프론트 라이브러리
    implementation('org.webjars.bower:jquery:3.3.1')
    implementation('org.webjars:sockjs-client:1.1.2')
    implementation('org.webjars:stomp-websocket:2.3.3-1')
    implementation('org.webjars:webjars-locator:0.30')
    //WebRTC 클라이언트 의존성 추가
    implementation('org.webjars.bower:webrtc-adapter:7.4.0')
    //Kurento (미디어서버) 관련 의존성 추가
    implementation('org.kurento:kurento-client:6.16.0')
    implementation('org.kurento:kurento-utils-js:6.15.0')

    //IntelliJ용
    //IntelliJ에서는 하기 annotationProcessor를 쓰면 별도의 querydsl 플러그인 및 플러그인 설정이 불필요.
    annotationProcessor("com.querydsl:querydsl-apt:${querydslVer}:jpa")

    implementation("com.squareup.retrofit2:retrofit:2.7.1")
    implementation("com.squareup.retrofit2:converter-jackson:2.7.1")
    implementation("com.squareup.okhttp3:logging-interceptor:3.9.0")

    implementation("com.google.guava:guava:29.0-jre")
    annotationProcessor("com.google.guava:guava:29.0-jre")

    testImplementation("com.jayway.jsonpath:json-path:2.4.0")

    implementation("com.auth0:java-jwt:3.10.3")
    
    implementation("io.springfox:springfox-swagger2:3.0.0")
    implementation("io.springfox:springfox-swagger-ui:3.0.0")
    implementation("io.springfox:springfox-data-rest:3.0.0")
    implementation("io.springfox:springfox-bean-validators:3.0.0")
    implementation("io.springfox:springfox-boot-starter:3.0.0")

    compile("javax.annotation:javax.annotation-api:1.2")

    testImplementation("org.springframework.security:spring-security-test") //security testing용 추가

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testCompile 'org.projectlombok:lombok'
    testImplementation 'org.projectlombok:lombok'


    testCompile('org.springframework.boot:spring-boot-starter-test')
}

test {
    useJUnitPlatform()
}